
node(value) -> {
	return {
		value: value
		next: undefined
		prev: undefined
	}
}

export Queue() -> {
	var head, ass, length = 0
	@enqueue = (value) -> {
		var nd = node(value)
		if length == 0
			head = ass = nd
		else
 			nd.next = ass
 			ass.prev = nd
 			ass = nd
		

		length += 1
	}

	@dequeue = () -> {
		if length == 0
			throw new Error("Cannot pop")
		else
			var rval = head.value
			if length == 1
				head = ass = undefined
			else
				head.prev.next = undefined
				head = head.prev
			

			length -= 1
			return rval
		
	}

	@isEmpty = () -> {
		return length == 0
	}

	Object.defineProperty(this, "length", {
		get: () -> {
			return length
		}
		set: (value) -> {
			throw new Error("Readonly property")
		}
	})
}
